<<<<<<< HEAD:google/iam_compute_snapshot.go
=======
// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

>>>>>>> e214aac40503b2e28c5bcc73b7c91726014c7e35:google-beta/services/compute/iam_compute_snapshot.go
// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

<<<<<<< HEAD:google/iam_compute_snapshot.go
package google
=======
package compute
>>>>>>> e214aac40503b2e28c5bcc73b7c91726014c7e35:google-beta/services/compute/iam_compute_snapshot.go

import (
	"fmt"

	"github.com/hashicorp/errwrap"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"google.golang.org/api/cloudresourcemanager/v1"
<<<<<<< HEAD:google/iam_compute_snapshot.go
=======

	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgiamresource"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
>>>>>>> e214aac40503b2e28c5bcc73b7c91726014c7e35:google-beta/services/compute/iam_compute_snapshot.go
)

var ComputeSnapshotIamSchema = map[string]*schema.Schema{
	"project": {
		Type:     schema.TypeString,
		Computed: true,
		Optional: true,
		ForceNew: true,
	},
	"name": {
		Type:             schema.TypeString,
		Required:         true,
		ForceNew:         true,
<<<<<<< HEAD:google/iam_compute_snapshot.go
		DiffSuppressFunc: compareSelfLinkOrResourceName,
=======
		DiffSuppressFunc: tpgresource.CompareSelfLinkOrResourceName,
>>>>>>> e214aac40503b2e28c5bcc73b7c91726014c7e35:google-beta/services/compute/iam_compute_snapshot.go
	},
}

type ComputeSnapshotIamUpdater struct {
	project string
	name    string
<<<<<<< HEAD:google/iam_compute_snapshot.go
	d       TerraformResourceData
	Config  *Config
}

func ComputeSnapshotIamUpdaterProducer(d TerraformResourceData, config *Config) (ResourceIamUpdater, error) {
	values := make(map[string]string)

	project, _ := getProject(d, config)
=======
	d       tpgresource.TerraformResourceData
	Config  *transport_tpg.Config
}

func ComputeSnapshotIamUpdaterProducer(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (tpgiamresource.ResourceIamUpdater, error) {
	values := make(map[string]string)

	project, _ := tpgresource.GetProject(d, config)
>>>>>>> e214aac40503b2e28c5bcc73b7c91726014c7e35:google-beta/services/compute/iam_compute_snapshot.go
	if project != "" {
		if err := d.Set("project", project); err != nil {
			return nil, fmt.Errorf("Error setting project: %s", err)
		}
	}
	values["project"] = project
	if v, ok := d.GetOk("name"); ok {
		values["name"] = v.(string)
	}

	// We may have gotten either a long or short name, so attempt to parse long name if possible
<<<<<<< HEAD:google/iam_compute_snapshot.go
	m, err := getImportIdQualifiers([]string{"projects/(?P<project>[^/]+)/global/snapshots/(?P<name>[^/]+)", "(?P<project>[^/]+)/(?P<name>[^/]+)", "(?P<name>[^/]+)"}, d, config, d.Get("name").(string))
=======
	m, err := tpgresource.GetImportIdQualifiers([]string{"projects/(?P<project>[^/]+)/global/snapshots/(?P<name>[^/]+)", "(?P<project>[^/]+)/(?P<name>[^/]+)", "(?P<name>[^/]+)"}, d, config, d.Get("name").(string))
>>>>>>> e214aac40503b2e28c5bcc73b7c91726014c7e35:google-beta/services/compute/iam_compute_snapshot.go
	if err != nil {
		return nil, err
	}

	for k, v := range m {
		values[k] = v
	}

	u := &ComputeSnapshotIamUpdater{
		project: values["project"],
		name:    values["name"],
		d:       d,
		Config:  config,
	}

	if err := d.Set("project", u.project); err != nil {
		return nil, fmt.Errorf("Error setting project: %s", err)
	}
	if err := d.Set("name", u.GetResourceId()); err != nil {
		return nil, fmt.Errorf("Error setting name: %s", err)
	}

	return u, nil
}

<<<<<<< HEAD:google/iam_compute_snapshot.go
func ComputeSnapshotIdParseFunc(d *schema.ResourceData, config *Config) error {
	values := make(map[string]string)

	project, _ := getProject(d, config)
=======
func ComputeSnapshotIdParseFunc(d *schema.ResourceData, config *transport_tpg.Config) error {
	values := make(map[string]string)

	project, _ := tpgresource.GetProject(d, config)
>>>>>>> e214aac40503b2e28c5bcc73b7c91726014c7e35:google-beta/services/compute/iam_compute_snapshot.go
	if project != "" {
		values["project"] = project
	}

<<<<<<< HEAD:google/iam_compute_snapshot.go
	m, err := getImportIdQualifiers([]string{"projects/(?P<project>[^/]+)/global/snapshots/(?P<name>[^/]+)", "(?P<project>[^/]+)/(?P<name>[^/]+)", "(?P<name>[^/]+)"}, d, config, d.Id())
=======
	m, err := tpgresource.GetImportIdQualifiers([]string{"projects/(?P<project>[^/]+)/global/snapshots/(?P<name>[^/]+)", "(?P<project>[^/]+)/(?P<name>[^/]+)", "(?P<name>[^/]+)"}, d, config, d.Id())
>>>>>>> e214aac40503b2e28c5bcc73b7c91726014c7e35:google-beta/services/compute/iam_compute_snapshot.go
	if err != nil {
		return err
	}

	for k, v := range m {
		values[k] = v
	}

	u := &ComputeSnapshotIamUpdater{
		project: values["project"],
		name:    values["name"],
		d:       d,
		Config:  config,
	}
	if err := d.Set("name", u.GetResourceId()); err != nil {
		return fmt.Errorf("Error setting name: %s", err)
	}
	d.SetId(u.GetResourceId())
	return nil
}

func (u *ComputeSnapshotIamUpdater) GetResourceIamPolicy() (*cloudresourcemanager.Policy, error) {
	url, err := u.qualifySnapshotUrl("getIamPolicy")
	if err != nil {
		return nil, err
	}

<<<<<<< HEAD:google/iam_compute_snapshot.go
	project, err := getProject(u.d, u.Config)
=======
	project, err := tpgresource.GetProject(u.d, u.Config)
>>>>>>> e214aac40503b2e28c5bcc73b7c91726014c7e35:google-beta/services/compute/iam_compute_snapshot.go
	if err != nil {
		return nil, err
	}
	var obj map[string]interface{}

<<<<<<< HEAD:google/iam_compute_snapshot.go
	userAgent, err := generateUserAgentString(u.d, u.Config.UserAgent)
=======
	userAgent, err := tpgresource.GenerateUserAgentString(u.d, u.Config.UserAgent)
>>>>>>> e214aac40503b2e28c5bcc73b7c91726014c7e35:google-beta/services/compute/iam_compute_snapshot.go
	if err != nil {
		return nil, err
	}

<<<<<<< HEAD:google/iam_compute_snapshot.go
	policy, err := SendRequest(u.Config, "GET", project, url, userAgent, obj)
=======
	policy, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    u.Config,
		Method:    "GET",
		Project:   project,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
	})
>>>>>>> e214aac40503b2e28c5bcc73b7c91726014c7e35:google-beta/services/compute/iam_compute_snapshot.go
	if err != nil {
		return nil, errwrap.Wrapf(fmt.Sprintf("Error retrieving IAM policy for %s: {{err}}", u.DescribeResource()), err)
	}

	out := &cloudresourcemanager.Policy{}
<<<<<<< HEAD:google/iam_compute_snapshot.go
	err = Convert(policy, out)
=======
	err = tpgresource.Convert(policy, out)
>>>>>>> e214aac40503b2e28c5bcc73b7c91726014c7e35:google-beta/services/compute/iam_compute_snapshot.go
	if err != nil {
		return nil, errwrap.Wrapf("Cannot convert a policy to a resource manager policy: {{err}}", err)
	}

	return out, nil
}

func (u *ComputeSnapshotIamUpdater) SetResourceIamPolicy(policy *cloudresourcemanager.Policy) error {
<<<<<<< HEAD:google/iam_compute_snapshot.go
	json, err := ConvertToMap(policy)
=======
	json, err := tpgresource.ConvertToMap(policy)
>>>>>>> e214aac40503b2e28c5bcc73b7c91726014c7e35:google-beta/services/compute/iam_compute_snapshot.go
	if err != nil {
		return err
	}

	obj := make(map[string]interface{})
	obj["policy"] = json

	url, err := u.qualifySnapshotUrl("setIamPolicy")
	if err != nil {
		return err
	}
<<<<<<< HEAD:google/iam_compute_snapshot.go
	project, err := getProject(u.d, u.Config)
=======
	project, err := tpgresource.GetProject(u.d, u.Config)
>>>>>>> e214aac40503b2e28c5bcc73b7c91726014c7e35:google-beta/services/compute/iam_compute_snapshot.go
	if err != nil {
		return err
	}

<<<<<<< HEAD:google/iam_compute_snapshot.go
	userAgent, err := generateUserAgentString(u.d, u.Config.UserAgent)
=======
	userAgent, err := tpgresource.GenerateUserAgentString(u.d, u.Config.UserAgent)
>>>>>>> e214aac40503b2e28c5bcc73b7c91726014c7e35:google-beta/services/compute/iam_compute_snapshot.go
	if err != nil {
		return err
	}

<<<<<<< HEAD:google/iam_compute_snapshot.go
	_, err = SendRequestWithTimeout(u.Config, "POST", project, url, userAgent, obj, u.d.Timeout(schema.TimeoutCreate))
=======
	_, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    u.Config,
		Method:    "POST",
		Project:   project,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   u.d.Timeout(schema.TimeoutCreate),
	})
>>>>>>> e214aac40503b2e28c5bcc73b7c91726014c7e35:google-beta/services/compute/iam_compute_snapshot.go
	if err != nil {
		return errwrap.Wrapf(fmt.Sprintf("Error setting IAM policy for %s: {{err}}", u.DescribeResource()), err)
	}

	return nil
}

func (u *ComputeSnapshotIamUpdater) qualifySnapshotUrl(methodIdentifier string) (string, error) {
	urlTemplate := fmt.Sprintf("{{ComputeBasePath}}%s/%s", fmt.Sprintf("projects/%s/global/snapshots/%s", u.project, u.name), methodIdentifier)
<<<<<<< HEAD:google/iam_compute_snapshot.go
	url, err := replaceVars(u.d, u.Config, urlTemplate)
=======
	url, err := tpgresource.ReplaceVars(u.d, u.Config, urlTemplate)
>>>>>>> e214aac40503b2e28c5bcc73b7c91726014c7e35:google-beta/services/compute/iam_compute_snapshot.go
	if err != nil {
		return "", err
	}
	return url, nil
}

func (u *ComputeSnapshotIamUpdater) GetResourceId() string {
	return fmt.Sprintf("projects/%s/global/snapshots/%s", u.project, u.name)
}

func (u *ComputeSnapshotIamUpdater) GetMutexKey() string {
	return fmt.Sprintf("iam-compute-snapshot-%s", u.GetResourceId())
}

func (u *ComputeSnapshotIamUpdater) DescribeResource() string {
	return fmt.Sprintf("compute snapshot %q", u.GetResourceId())
}
