<<<<<<< HEAD:google/resource_compute_managed_ssl_certificate.go
=======
// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

>>>>>>> e214aac40503b2e28c5bcc73b7c91726014c7e35:google-beta/services/compute/resource_compute_managed_ssl_certificate.go
// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

<<<<<<< HEAD:google/resource_compute_managed_ssl_certificate.go
package google
=======
package compute
>>>>>>> e214aac40503b2e28c5bcc73b7c91726014c7e35:google-beta/services/compute/resource_compute_managed_ssl_certificate.go

import (
	"fmt"
	"log"
	"reflect"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
<<<<<<< HEAD:google/resource_compute_managed_ssl_certificate.go
=======

	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/verify"
>>>>>>> e214aac40503b2e28c5bcc73b7c91726014c7e35:google-beta/services/compute/resource_compute_managed_ssl_certificate.go
)

func ResourceComputeManagedSslCertificate() *schema.Resource {
	return &schema.Resource{
		Create: resourceComputeManagedSslCertificateCreate,
		Read:   resourceComputeManagedSslCertificateRead,
		Delete: resourceComputeManagedSslCertificateDelete,

		Importer: &schema.ResourceImporter{
			State: resourceComputeManagedSslCertificateImport,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(30 * time.Minute),
			Delete: schema.DefaultTimeout(30 * time.Minute),
		},

		Schema: map[string]*schema.Schema{
			"description": {
				Type:        schema.TypeString,
				Optional:    true,
				ForceNew:    true,
				Description: `An optional description of this resource.`,
			},
			"managed": {
				Type:     schema.TypeList,
				Optional: true,
				ForceNew: true,
				Description: `Properties relevant to a managed certificate.  These will be used if the
certificate is managed (as indicated by a value of 'MANAGED' in 'type').`,
				MaxItems: 1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"domains": {
							Type:             schema.TypeList,
							Required:         true,
							ForceNew:         true,
<<<<<<< HEAD:google/resource_compute_managed_ssl_certificate.go
							DiffSuppressFunc: absoluteDomainSuppress,
=======
							DiffSuppressFunc: tpgresource.AbsoluteDomainSuppress,
>>>>>>> e214aac40503b2e28c5bcc73b7c91726014c7e35:google-beta/services/compute/resource_compute_managed_ssl_certificate.go
							Description: `Domains for which a managed SSL certificate will be valid.  Currently,
there can be up to 100 domains in this list.`,
							MaxItems: 100,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
					},
				},
			},
			"name": {
				Type:     schema.TypeString,
				Optional: true,
				ForceNew: true,
				Description: `Name of the resource. Provided by the client when the resource is
created. The name must be 1-63 characters long, and comply with
RFC1035. Specifically, the name must be 1-63 characters long and match
the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the
first character must be a lowercase letter, and all following
characters must be a dash, lowercase letter, or digit, except the last
character, which cannot be a dash.


These are in the same namespace as the managed SSL certificates.`,
			},
			"type": {
				Type:         schema.TypeString,
				Optional:     true,
				ForceNew:     true,
<<<<<<< HEAD:google/resource_compute_managed_ssl_certificate.go
				ValidateFunc: validateEnum([]string{"MANAGED", ""}),
=======
				ValidateFunc: verify.ValidateEnum([]string{"MANAGED", ""}),
>>>>>>> e214aac40503b2e28c5bcc73b7c91726014c7e35:google-beta/services/compute/resource_compute_managed_ssl_certificate.go
				Description: `Enum field whose value is always 'MANAGED' - used to signal to the API
which type this is. Default value: "MANAGED" Possible values: ["MANAGED"]`,
				Default: "MANAGED",
			},
			"certificate_id": {
				Type:        schema.TypeInt,
				Computed:    true,
				Optional:    true,
				Description: `The unique identifier for the resource.`,
			},
			"creation_timestamp": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Creation timestamp in RFC3339 text format.`,
			},
			"expire_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Expire time of the certificate in RFC3339 text format.`,
			},
			"subject_alternative_names": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Domains associated with the certificate via Subject Alternative Name.`,
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},
			"project": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
			"self_link": {
				Type:     schema.TypeString,
				Computed: true,
			},
		},
		UseJSONNumber: true,
	}
}

func resourceComputeManagedSslCertificateCreate(d *schema.ResourceData, meta interface{}) error {
<<<<<<< HEAD:google/resource_compute_managed_ssl_certificate.go
	config := meta.(*Config)
	userAgent, err := generateUserAgentString(d, config.UserAgent)
=======
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
>>>>>>> e214aac40503b2e28c5bcc73b7c91726014c7e35:google-beta/services/compute/resource_compute_managed_ssl_certificate.go
	if err != nil {
		return err
	}

	obj := make(map[string]interface{})
	descriptionProp, err := expandComputeManagedSslCertificateDescription(d.Get("description"), d, config)
	if err != nil {
		return err
<<<<<<< HEAD:google/resource_compute_managed_ssl_certificate.go
	} else if v, ok := d.GetOkExists("description"); !isEmptyValue(reflect.ValueOf(descriptionProp)) && (ok || !reflect.DeepEqual(v, descriptionProp)) {
=======
	} else if v, ok := d.GetOkExists("description"); !tpgresource.IsEmptyValue(reflect.ValueOf(descriptionProp)) && (ok || !reflect.DeepEqual(v, descriptionProp)) {
>>>>>>> e214aac40503b2e28c5bcc73b7c91726014c7e35:google-beta/services/compute/resource_compute_managed_ssl_certificate.go
		obj["description"] = descriptionProp
	}
	nameProp, err := expandComputeManagedSslCertificateName(d.Get("name"), d, config)
	if err != nil {
		return err
<<<<<<< HEAD:google/resource_compute_managed_ssl_certificate.go
	} else if v, ok := d.GetOkExists("name"); !isEmptyValue(reflect.ValueOf(nameProp)) && (ok || !reflect.DeepEqual(v, nameProp)) {
=======
	} else if v, ok := d.GetOkExists("name"); !tpgresource.IsEmptyValue(reflect.ValueOf(nameProp)) && (ok || !reflect.DeepEqual(v, nameProp)) {
>>>>>>> e214aac40503b2e28c5bcc73b7c91726014c7e35:google-beta/services/compute/resource_compute_managed_ssl_certificate.go
		obj["name"] = nameProp
	}
	managedProp, err := expandComputeManagedSslCertificateManaged(d.Get("managed"), d, config)
	if err != nil {
		return err
<<<<<<< HEAD:google/resource_compute_managed_ssl_certificate.go
	} else if v, ok := d.GetOkExists("managed"); !isEmptyValue(reflect.ValueOf(managedProp)) && (ok || !reflect.DeepEqual(v, managedProp)) {
=======
	} else if v, ok := d.GetOkExists("managed"); !tpgresource.IsEmptyValue(reflect.ValueOf(managedProp)) && (ok || !reflect.DeepEqual(v, managedProp)) {
>>>>>>> e214aac40503b2e28c5bcc73b7c91726014c7e35:google-beta/services/compute/resource_compute_managed_ssl_certificate.go
		obj["managed"] = managedProp
	}
	typeProp, err := expandComputeManagedSslCertificateType(d.Get("type"), d, config)
	if err != nil {
		return err
<<<<<<< HEAD:google/resource_compute_managed_ssl_certificate.go
	} else if v, ok := d.GetOkExists("type"); !isEmptyValue(reflect.ValueOf(typeProp)) && (ok || !reflect.DeepEqual(v, typeProp)) {
		obj["type"] = typeProp
	}

	url, err := replaceVars(d, config, "{{ComputeBasePath}}projects/{{project}}/global/sslCertificates")
=======
	} else if v, ok := d.GetOkExists("type"); !tpgresource.IsEmptyValue(reflect.ValueOf(typeProp)) && (ok || !reflect.DeepEqual(v, typeProp)) {
		obj["type"] = typeProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{ComputeBasePath}}projects/{{project}}/global/sslCertificates")
>>>>>>> e214aac40503b2e28c5bcc73b7c91726014c7e35:google-beta/services/compute/resource_compute_managed_ssl_certificate.go
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new ManagedSslCertificate: %#v", obj)
	billingProject := ""

<<<<<<< HEAD:google/resource_compute_managed_ssl_certificate.go
	project, err := getProject(d, config)
=======
	project, err := tpgresource.GetProject(d, config)
>>>>>>> e214aac40503b2e28c5bcc73b7c91726014c7e35:google-beta/services/compute/resource_compute_managed_ssl_certificate.go
	if err != nil {
		return fmt.Errorf("Error fetching project for ManagedSslCertificate: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
<<<<<<< HEAD:google/resource_compute_managed_ssl_certificate.go
	if bp, err := getBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := SendRequestWithTimeout(config, "POST", billingProject, url, userAgent, obj, d.Timeout(schema.TimeoutCreate))
=======
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "POST",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutCreate),
	})
>>>>>>> e214aac40503b2e28c5bcc73b7c91726014c7e35:google-beta/services/compute/resource_compute_managed_ssl_certificate.go
	if err != nil {
		return fmt.Errorf("Error creating ManagedSslCertificate: %s", err)
	}

	// Store the ID now
<<<<<<< HEAD:google/resource_compute_managed_ssl_certificate.go
	id, err := replaceVars(d, config, "projects/{{project}}/global/sslCertificates/{{name}}")
=======
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/global/sslCertificates/{{name}}")
>>>>>>> e214aac40503b2e28c5bcc73b7c91726014c7e35:google-beta/services/compute/resource_compute_managed_ssl_certificate.go
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	err = ComputeOperationWaitTime(
		config, res, project, "Creating ManagedSslCertificate", userAgent,
		d.Timeout(schema.TimeoutCreate))

	if err != nil {
		// The resource didn't actually create
		d.SetId("")
		return fmt.Errorf("Error waiting to create ManagedSslCertificate: %s", err)
	}

	log.Printf("[DEBUG] Finished creating ManagedSslCertificate %q: %#v", d.Id(), res)

	return resourceComputeManagedSslCertificateRead(d, meta)
}

func resourceComputeManagedSslCertificateRead(d *schema.ResourceData, meta interface{}) error {
<<<<<<< HEAD:google/resource_compute_managed_ssl_certificate.go
	config := meta.(*Config)
	userAgent, err := generateUserAgentString(d, config.UserAgent)
=======
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
>>>>>>> e214aac40503b2e28c5bcc73b7c91726014c7e35:google-beta/services/compute/resource_compute_managed_ssl_certificate.go
	if err != nil {
		return err
	}

<<<<<<< HEAD:google/resource_compute_managed_ssl_certificate.go
	url, err := replaceVars(d, config, "{{ComputeBasePath}}projects/{{project}}/global/sslCertificates/{{name}}")
=======
	url, err := tpgresource.ReplaceVars(d, config, "{{ComputeBasePath}}projects/{{project}}/global/sslCertificates/{{name}}")
>>>>>>> e214aac40503b2e28c5bcc73b7c91726014c7e35:google-beta/services/compute/resource_compute_managed_ssl_certificate.go
	if err != nil {
		return err
	}

	billingProject := ""

<<<<<<< HEAD:google/resource_compute_managed_ssl_certificate.go
	project, err := getProject(d, config)
=======
	project, err := tpgresource.GetProject(d, config)
>>>>>>> e214aac40503b2e28c5bcc73b7c91726014c7e35:google-beta/services/compute/resource_compute_managed_ssl_certificate.go
	if err != nil {
		return fmt.Errorf("Error fetching project for ManagedSslCertificate: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
<<<<<<< HEAD:google/resource_compute_managed_ssl_certificate.go
	if bp, err := getBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := SendRequest(config, "GET", billingProject, url, userAgent, nil)
	if err != nil {
		return handleNotFoundError(err, d, fmt.Sprintf("ComputeManagedSslCertificate %q", d.Id()))
=======
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "GET",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, fmt.Sprintf("ComputeManagedSslCertificate %q", d.Id()))
>>>>>>> e214aac40503b2e28c5bcc73b7c91726014c7e35:google-beta/services/compute/resource_compute_managed_ssl_certificate.go
	}

	if err := d.Set("project", project); err != nil {
		return fmt.Errorf("Error reading ManagedSslCertificate: %s", err)
	}

	if err := d.Set("creation_timestamp", flattenComputeManagedSslCertificateCreationTimestamp(res["creationTimestamp"], d, config)); err != nil {
		return fmt.Errorf("Error reading ManagedSslCertificate: %s", err)
	}
	if err := d.Set("description", flattenComputeManagedSslCertificateDescription(res["description"], d, config)); err != nil {
		return fmt.Errorf("Error reading ManagedSslCertificate: %s", err)
	}
	if err := d.Set("certificate_id", flattenComputeManagedSslCertificateCertificateId(res["id"], d, config)); err != nil {
		return fmt.Errorf("Error reading ManagedSslCertificate: %s", err)
	}
	if err := d.Set("name", flattenComputeManagedSslCertificateName(res["name"], d, config)); err != nil {
		return fmt.Errorf("Error reading ManagedSslCertificate: %s", err)
	}
	if err := d.Set("managed", flattenComputeManagedSslCertificateManaged(res["managed"], d, config)); err != nil {
		return fmt.Errorf("Error reading ManagedSslCertificate: %s", err)
	}
	if err := d.Set("type", flattenComputeManagedSslCertificateType(res["type"], d, config)); err != nil {
		return fmt.Errorf("Error reading ManagedSslCertificate: %s", err)
	}
	if err := d.Set("subject_alternative_names", flattenComputeManagedSslCertificateSubjectAlternativeNames(res["subjectAlternativeNames"], d, config)); err != nil {
		return fmt.Errorf("Error reading ManagedSslCertificate: %s", err)
	}
	if err := d.Set("expire_time", flattenComputeManagedSslCertificateExpireTime(res["expireTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading ManagedSslCertificate: %s", err)
	}
<<<<<<< HEAD:google/resource_compute_managed_ssl_certificate.go
	if err := d.Set("self_link", ConvertSelfLinkToV1(res["selfLink"].(string))); err != nil {
=======
	if err := d.Set("self_link", tpgresource.ConvertSelfLinkToV1(res["selfLink"].(string))); err != nil {
>>>>>>> e214aac40503b2e28c5bcc73b7c91726014c7e35:google-beta/services/compute/resource_compute_managed_ssl_certificate.go
		return fmt.Errorf("Error reading ManagedSslCertificate: %s", err)
	}

	return nil
}

func resourceComputeManagedSslCertificateDelete(d *schema.ResourceData, meta interface{}) error {
<<<<<<< HEAD:google/resource_compute_managed_ssl_certificate.go
	config := meta.(*Config)
	userAgent, err := generateUserAgentString(d, config.UserAgent)
=======
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
>>>>>>> e214aac40503b2e28c5bcc73b7c91726014c7e35:google-beta/services/compute/resource_compute_managed_ssl_certificate.go
	if err != nil {
		return err
	}

	billingProject := ""

<<<<<<< HEAD:google/resource_compute_managed_ssl_certificate.go
	project, err := getProject(d, config)
=======
	project, err := tpgresource.GetProject(d, config)
>>>>>>> e214aac40503b2e28c5bcc73b7c91726014c7e35:google-beta/services/compute/resource_compute_managed_ssl_certificate.go
	if err != nil {
		return fmt.Errorf("Error fetching project for ManagedSslCertificate: %s", err)
	}
	billingProject = project

<<<<<<< HEAD:google/resource_compute_managed_ssl_certificate.go
	url, err := replaceVars(d, config, "{{ComputeBasePath}}projects/{{project}}/global/sslCertificates/{{name}}")
=======
	url, err := tpgresource.ReplaceVars(d, config, "{{ComputeBasePath}}projects/{{project}}/global/sslCertificates/{{name}}")
>>>>>>> e214aac40503b2e28c5bcc73b7c91726014c7e35:google-beta/services/compute/resource_compute_managed_ssl_certificate.go
	if err != nil {
		return err
	}

	var obj map[string]interface{}
	log.Printf("[DEBUG] Deleting ManagedSslCertificate %q", d.Id())

	// err == nil indicates that the billing_project value was found
<<<<<<< HEAD:google/resource_compute_managed_ssl_certificate.go
	if bp, err := getBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := SendRequestWithTimeout(config, "DELETE", billingProject, url, userAgent, obj, d.Timeout(schema.TimeoutDelete))
	if err != nil {
		return handleNotFoundError(err, d, "ManagedSslCertificate")
=======
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "DELETE",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutDelete),
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, "ManagedSslCertificate")
>>>>>>> e214aac40503b2e28c5bcc73b7c91726014c7e35:google-beta/services/compute/resource_compute_managed_ssl_certificate.go
	}

	err = ComputeOperationWaitTime(
		config, res, project, "Deleting ManagedSslCertificate", userAgent,
		d.Timeout(schema.TimeoutDelete))

	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Finished deleting ManagedSslCertificate %q: %#v", d.Id(), res)
	return nil
}

func resourceComputeManagedSslCertificateImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
<<<<<<< HEAD:google/resource_compute_managed_ssl_certificate.go
	config := meta.(*Config)
	if err := parseImportId([]string{
=======
	config := meta.(*transport_tpg.Config)
	if err := tpgresource.ParseImportId([]string{
>>>>>>> e214aac40503b2e28c5bcc73b7c91726014c7e35:google-beta/services/compute/resource_compute_managed_ssl_certificate.go
		"projects/(?P<project>[^/]+)/global/sslCertificates/(?P<name>[^/]+)",
		"(?P<project>[^/]+)/(?P<name>[^/]+)",
		"(?P<name>[^/]+)",
	}, d, config); err != nil {
		return nil, err
	}

	// Replace import id for the resource id
<<<<<<< HEAD:google/resource_compute_managed_ssl_certificate.go
	id, err := replaceVars(d, config, "projects/{{project}}/global/sslCertificates/{{name}}")
=======
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/global/sslCertificates/{{name}}")
>>>>>>> e214aac40503b2e28c5bcc73b7c91726014c7e35:google-beta/services/compute/resource_compute_managed_ssl_certificate.go
	if err != nil {
		return nil, fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	return []*schema.ResourceData{d}, nil
}

<<<<<<< HEAD:google/resource_compute_managed_ssl_certificate.go
func flattenComputeManagedSslCertificateCreationTimestamp(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenComputeManagedSslCertificateDescription(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenComputeManagedSslCertificateCertificateId(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := StringToFixed64(strVal); err == nil {
=======
func flattenComputeManagedSslCertificateCreationTimestamp(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeManagedSslCertificateDescription(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeManagedSslCertificateCertificateId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
>>>>>>> e214aac40503b2e28c5bcc73b7c91726014c7e35:google-beta/services/compute/resource_compute_managed_ssl_certificate.go
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

<<<<<<< HEAD:google/resource_compute_managed_ssl_certificate.go
func flattenComputeManagedSslCertificateName(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenComputeManagedSslCertificateManaged(v interface{}, d *schema.ResourceData, config *Config) interface{} {
=======
func flattenComputeManagedSslCertificateName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeManagedSslCertificateManaged(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
>>>>>>> e214aac40503b2e28c5bcc73b7c91726014c7e35:google-beta/services/compute/resource_compute_managed_ssl_certificate.go
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["domains"] =
		flattenComputeManagedSslCertificateManagedDomains(original["domains"], d, config)
	return []interface{}{transformed}
}
<<<<<<< HEAD:google/resource_compute_managed_ssl_certificate.go
func flattenComputeManagedSslCertificateManagedDomains(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenComputeManagedSslCertificateType(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenComputeManagedSslCertificateSubjectAlternativeNames(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenComputeManagedSslCertificateExpireTime(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func expandComputeManagedSslCertificateDescription(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandComputeManagedSslCertificateName(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandComputeManagedSslCertificateManaged(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
=======
func flattenComputeManagedSslCertificateManagedDomains(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeManagedSslCertificateType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeManagedSslCertificateSubjectAlternativeNames(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeManagedSslCertificateExpireTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func expandComputeManagedSslCertificateDescription(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeManagedSslCertificateName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeManagedSslCertificateManaged(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
>>>>>>> e214aac40503b2e28c5bcc73b7c91726014c7e35:google-beta/services/compute/resource_compute_managed_ssl_certificate.go
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedDomains, err := expandComputeManagedSslCertificateManagedDomains(original["domains"], d, config)
	if err != nil {
		return nil, err
<<<<<<< HEAD:google/resource_compute_managed_ssl_certificate.go
	} else if val := reflect.ValueOf(transformedDomains); val.IsValid() && !isEmptyValue(val) {
=======
	} else if val := reflect.ValueOf(transformedDomains); val.IsValid() && !tpgresource.IsEmptyValue(val) {
>>>>>>> e214aac40503b2e28c5bcc73b7c91726014c7e35:google-beta/services/compute/resource_compute_managed_ssl_certificate.go
		transformed["domains"] = transformedDomains
	}

	return transformed, nil
}

<<<<<<< HEAD:google/resource_compute_managed_ssl_certificate.go
func expandComputeManagedSslCertificateManagedDomains(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandComputeManagedSslCertificateType(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
=======
func expandComputeManagedSslCertificateManagedDomains(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeManagedSslCertificateType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
>>>>>>> e214aac40503b2e28c5bcc73b7c91726014c7e35:google-beta/services/compute/resource_compute_managed_ssl_certificate.go
	return v, nil
}
